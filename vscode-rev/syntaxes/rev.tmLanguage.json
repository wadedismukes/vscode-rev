{
	"information_for_contributors": [
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/wadedismukes/vscode-rev/commit/",
	"name": "Rev",
	"scopeName": "source.rev",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#storage-type"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#function-declarations"
		},
		{
			"include": "#builtin-functions"
		},
		{
			"include": "#function-calls"
		},
		{
			"include": "#general-variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "comment.line.pragma.rev"
						},
						"2": {
							"name": "entity.name.pragma.name.rev"
						}
					},
					"match": "^(#pragma[ \\t]+mark)[ \\t](.*)",
					"name": "comment.line.pragma-mark.rev"
				},
				{
					"begin": "(^[ \\t]+)?(?=#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.rev"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "#",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.rev"
								}
							},
							"end": "\\n",
							"name": "comment.line.number-sign.rev"
						}
					]
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\b(pi|letters|LETTERS|month\\.abb|month\\.name)\\b",
					"name": "support.constant.misc.rev"
				},
				{
					"match": "\\b(TRUE|FALSE|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_|Inf|NaN)\\b",
					"name": "constant.language.rev"
				},
				{
					"match": "\\b0(x|X)[0-9a-fA-F]+i\\b",
					"name": "constant.numeric.imaginary.hexadecimal.rev"
				},
				{
					"match": "\\b[0-9]+\\.?[0-9]*(?:(e|E)(\\+|-)?[0-9]+)?i\\b",
					"name": "constant.numeric.imaginary.decimal.rev"
				},
				{
					"match": "\\.[0-9]+(?:(e|E)(\\+|-)?[0-9]+)?i\\b",
					"name": "constant.numeric.imaginary.decimal.rev"
				},
				{
					"match": "\\b0(x|X)[0-9a-fA-F]+L\\b",
					"name": "constant.numeric.integer.hexadecimal.rev"
				},
				{
					"match": "\\b(?:[0-9]+\\.?[0-9]*)(?:(e|E)(\\+|-)?[0-9]+)?L\\b",
					"name": "constant.numeric.integer.decimal.rev"
				},
				{
					"match": "\\b0(x|X)[0-9a-fA-F]+\\b",
					"name": "constant.numeric.float.hexadecimal.rev"
				},
				{
					"match": "\\b[0-9]+\\.?[0-9]*(?:(e|E)(\\+|-)?[0-9]+)?\\b",
					"name": "constant.numeric.float.decimal.rev"
				},
				{
					"match": "\\.[0-9]+(?:(e|E)(\\+|-)?[0-9]+)?\\b",
					"name": "constant.numeric.float.decimal.rev"
				}
			]
		},
		"general-variables": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "variable.parameter.rev"
						},
						"2": {
							"name": "keyword.operator.modelassignment.rev"
						},
                        "3": {
                            "name": "keyword.operator.workspaceassignment.rev"
                        }
					},
					"match": "([[:alpha:].][[:alnum:]._]*)\\s*(=)(?=[^=])"
				},
				{
					"match": "\\b([\\d_][[:alnum:]._]+)\\b",
					"name": "invalid.illegal.variable.other.rev"
				},
				{
					"match": "\\b([[:alnum:]_]+)(?=::)",
					"name": "entity.namespace.rev"
				},
				{
					"match": "\\b([[:alnum:]._]+)\\b",
					"name": "variable.other.rev"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(break|next|repeat|else|in)\\b",
					"name": "keyword.control.rev"
				},
				{
					"match": "\\b(ifelse|if|for|return|switch|while|invisible)\\b(?=\\s*\\()",
					"name": "keyword.control.rev"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%\\/%|%%|%\\*%|\\^)",
					"name": "keyword.operator.arithmetic.rev"
				},
				{
                    "match": "(:=|<-|~)",
					"name": "keyword.operator.modelassignment.rev"
				},
                {
                    "match": "(=)",
					"name": "keyword.operator.workspaceassignment.rev"
				},
				{
					"match": "(==|<=|>=|!=|<>|<|>)",
					"name": "keyword.operator.comparison.rev"
				},
				{
					"match": "(!|&{1,2}|[|]{1,2})",
					"name": "keyword.operator.logical.rev"
				}
			]
		},
		"storage-type": {
			"patterns": [
				{
					"match": "\\b(character|complex|double|expression|integer|list|logical|numeric|single|raw)\\b(?=\\s*\\()",
					"name": "storage.type.rev"
				} 
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.rev"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.rev"
						}
					},
					"name": "string.quoted.double.rev",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.rev"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.rev"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.rev"
						}
					},
					"name": "string.quoted.single.rev",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.rev"
						}
					]
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.rev"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.rev"
						}
					},
					"patterns": [
						{
							"include": "source.rev"
						}
					]
				},
				{
					"begin": "\\[(?!\\[)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.brackets.single.begin.rev"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.brackets.single.end.rev"
						}
					},
					"patterns": [
						{
							"include": "source.rev"
						}
					]
				},
				{
					"begin": "\\[\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.brackets.double.begin.rev"
						}
					},
					"end": "\\]\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.brackets.double.end.rev"
						}
					},
					"contentName": "meta.item-access.arguments.rev",
					"patterns": [
						{
							"include": "source.rev"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.braces.begin.rev"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.braces.end.rev"
						}
					},
					"patterns": [
						{
							"include": "source.rev"
						}
					]
				}
			]
		},
		"function-declarations": {
			"patterns": [
				{
					"match": "((?:`[^`\\\\]*(?:\\\\.[^`\\\\]*)*`)|(?:[[:alpha:].][[:alnum:]._]*))\\s*(<?<-|=(?!=))\\s*(function)",
					"captures": {
						"1": {
							"name": "entity.name.function.rev"
						},
						"2": {
							"name": "keyword.operator.workspaceassignment.rev"
						},
						"3": {
							"name": "keyword.control.rev"
						}
					}
				}
			]
		},
		"function-calls": {
			"begin": "(?:\\b|(?=\\.))((?:[a-zA-Z._][\\w.]*|`[^`]+`))\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.function.rev"
				},
				"2": {
					"name": "punctuation.section.parens.begin.rev"
				}
			},
			"contentName": "meta.function-call.arguments.rev",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.parens.end.rev"
				}
			},
			"name": "meta.function-call.rev",
			"patterns": [
				{
					"include": "#function-parameters"
				}
			]
		},
		"function-parameters": {
			"patterns": [
				{
					"name": "meta.function-call.rev",
					"contentName": "meta.function-call.parameters.rev"
				},
				{
					"match": "(?:[a-zA-Z._][\\w.]*|`[^`]+`)(?=\\s[^=])",
					"name": "variable.parameter.rev"
				},
				{
					"begin": "(?==)",
					"end": "(?=[,)])",
					"patterns": [
						{
							"include": "source.rev"
						}
					]
				},
				{
					"match": ",",
					"name": "punctuation.separator.parameters.rev"
				},
				{
					"end": "\\)",
					"endCaptures": {
						"0": "punctuation.section.parens.end.rev"
					}
				},
				{
					"include": "source.rev"
				}
			]
		},
		"builtin-functions": {
			"patterns": [
				{
					"match": "\\b(AbstractHomologousDiscreteCharacterData|AverageDistanceMatrix|Bool|BranchLengthTree|CharacterHistoryRateModifier|CladogeneticProbabilityMatrix|CladogeneticSpeciationRateMatrix|ContinuousCharacterData|DistanceMatrix|Integer|MatrixBoolean|MatrixReal|MatrixRealPos|MatrixRealSymmetric|Natural|Probability|RateGenerator|Real|RealPos|Simplex|StochasticMatrix|String|TimeTree|Tree|clade|taxon)\\s*(\\()",
					"captures": {
						"1": {
							"name": "model.object.rev"
						}
					}
				},
				{
					"match": "\\b(dnBernoulli|dnBeta|dnBimodalLognormal|dnBimodalNormal|dnBinomial|dnBirthDeath|dnBirthDeathBurstProcess|dnBirthDeathSamplingTreatment|dnBivariatePoisson|dnCBDSP|dnCDBDP|dnCategorical|dnCauchy|dnChisq|dnCoalescent|dnCoalescentDemography|dnCoalescentSkyline|dnCompleteBirthDeath|dnConstrainedNodeAge|dnConstrainedNodeOrder|dnConstrainedTopology|dnCppNormal|dnDPP|dnDecomposedInvWishart|dnDirichlet|dnDiversityDependentYule|dnDuplicationLoss|dnEmpiricalSample|dnEmpiricalTree|dnEpisodicBirthDeath|dnEvent|dnExponential|dnExponentialError|dnFossilizedBirthDeathProcess|dnFossilizedBirthDeathRange|dnFossilizedBirthDeathRangeMatrix|dnGamma|dnGeometric|dnGilbertGraph|dnHBDP|dnHalfCauchy|dnHalfNormal|dnHeterochronousCoalescent|dnHeterochronousCoalescentSkyline|dnIID|dnInverseGamma|dnInverseWishart|dnLKJ|dnLKJPartial|dnLaplace|dnLogExponential|dnLognormal|dnLoguniform|dnMixture|dnMixtureAnalytical|dnMixtureVector|dnMultiSpeciesCoalescent|dnMultiSpeciesCoalescentInverseGamma|dnMultiSpeciesCoalescentUniformPrior|dnMultiValueEvent|dnMultinomial|dnMultivariateNormal|dnNbinomial|dnNormal|dnOrnsteinUhlenbeck|dnOutgroupBirthDeath|dnPhyloBranchRateBM|dnPhyloBrownian|dnPhyloBrownianMVN|dnPhyloBrownianMultiSampleREML|dnPhyloBrownianMultiVariate|dnPhyloBrownianREML|dnPhyloCTMC|dnPhyloCTMCClado|dnPhyloCTMCDASequence|dnPhyloCTMCDASiteIID|dnPhyloCTMCDollo|dnPhyloDistanceGamma|dnPhyloMultiSampleOrnsteinUhlenbeck|dnPhyloMultiSampleOrnsteinUhlenbeckREML|dnPhyloMultivariateBrownianMultiSampleREML|dnPhyloMultivariateBrownianREML|dnPhyloOrnsteinUhlenbeck|dnPhyloOrnsteinUhlenbeckMVN|dnPhyloOrnsteinUhlenbeckREML|dnPhyloOrnsteinUhlenbeckThreePoint|dnPhyloWhiteNoise|dnPhylodynamicBirthDeathProcess|dnPointMass|dnPoisson|dnReversibleJumpMixture|dnSBBDP|dnScaledDirichlet|dnSoftBoundUniformNormal|dnStudentT|dnTimeVaryingStateDependentSpeciationExtinction|dnUPP|dnUltrametricTree|dnUniform|dnUniformInteger|dnUniformNatural|dnUniformSerialSampledTimeTree|dnUniformTimeTree|dnUniformTopology|dnUniformTopologyBranchLength|dnVarianceGamma|dnWeightedConstrainedNodeOrder|dnWeightedSample|dnWhiteNoise|dnWishart)\\s*(\\()",
					"captures": {
						"1": {
							"name": "distribution.function.rev"
						}
					}
				},
				{
					"match": "\\b(VectorMonitors|VectorMoves||abs|ancestralStateTree|annotateTree|\\.append|branchScoreDistance|ceil|characterMapTree|checkNodeOrderConstraints|choose|clear|combineCharacter\\s*(\\()",
					"captures": {
						"1": {
							"name": "support.function.rev"
						}
					}
				}
			]
		}
	}
}